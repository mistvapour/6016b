version: '3.8'

services:
  # 数据库服务
  mysql:
    image: mysql:8.0
    container_name: milstd6016_mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME:-milstd6016}
      MYSQL_USER: ${DB_USER:-milstd6016}
      MYSQL_PASSWORD: ${DB_PASSWORD:-milstd6016}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - milstd6016_network
    restart: unless-stopped

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: milstd6016_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - milstd6016_network
    restart: unless-stopped

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: milstd6016_backend
    environment:
      - ENVIRONMENT=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=${DB_USER:-milstd6016}
      - DB_PASSWORD=${DB_PASSWORD:-milstd6016}
      - DB_NAME=${DB_NAME:-milstd6016}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
      - MAX_WORKERS=4
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./output:/app/output
      - ./logs:/app/logs
    depends_on:
      - mysql
      - redis
    networks:
      - milstd6016_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: milstd6016_frontend
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - milstd6016_network
    restart: unless-stopped

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: milstd6016_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - milstd6016_network
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:

networks:
  milstd6016_network:
    driver: bridge
